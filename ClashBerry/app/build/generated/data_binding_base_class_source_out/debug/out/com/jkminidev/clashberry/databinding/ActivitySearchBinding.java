// Generated by view binder compiler. Do not edit!
package com.jkminidev.clashberry.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.jkminidev.clashberry.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySearchBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout errorLayout;

  @NonNull
  public final TextView errorText;

  @NonNull
  public final LinearLayout loadingLayout;

  @NonNull
  public final Button retryButton;

  @NonNull
  public final ImageButton searchButton;

  @NonNull
  public final TextInputEditText searchEditText;

  @NonNull
  public final TextInputLayout searchInputLayout;

  @NonNull
  public final RecyclerView searchResultsRecyclerView;

  @NonNull
  public final SwipeRefreshLayout swipeRefreshLayout;

  @NonNull
  public final MaterialToolbar toolbar;

  private ActivitySearchBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout errorLayout,
      @NonNull TextView errorText, @NonNull LinearLayout loadingLayout, @NonNull Button retryButton,
      @NonNull ImageButton searchButton, @NonNull TextInputEditText searchEditText,
      @NonNull TextInputLayout searchInputLayout, @NonNull RecyclerView searchResultsRecyclerView,
      @NonNull SwipeRefreshLayout swipeRefreshLayout, @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.errorLayout = errorLayout;
    this.errorText = errorText;
    this.loadingLayout = loadingLayout;
    this.retryButton = retryButton;
    this.searchButton = searchButton;
    this.searchEditText = searchEditText;
    this.searchInputLayout = searchInputLayout;
    this.searchResultsRecyclerView = searchResultsRecyclerView;
    this.swipeRefreshLayout = swipeRefreshLayout;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySearchBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySearchBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_search, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySearchBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.errorLayout;
      LinearLayout errorLayout = ViewBindings.findChildViewById(rootView, id);
      if (errorLayout == null) {
        break missingId;
      }

      id = R.id.errorText;
      TextView errorText = ViewBindings.findChildViewById(rootView, id);
      if (errorText == null) {
        break missingId;
      }

      id = R.id.loadingLayout;
      LinearLayout loadingLayout = ViewBindings.findChildViewById(rootView, id);
      if (loadingLayout == null) {
        break missingId;
      }

      id = R.id.retryButton;
      Button retryButton = ViewBindings.findChildViewById(rootView, id);
      if (retryButton == null) {
        break missingId;
      }

      id = R.id.searchButton;
      ImageButton searchButton = ViewBindings.findChildViewById(rootView, id);
      if (searchButton == null) {
        break missingId;
      }

      id = R.id.searchEditText;
      TextInputEditText searchEditText = ViewBindings.findChildViewById(rootView, id);
      if (searchEditText == null) {
        break missingId;
      }

      id = R.id.searchInputLayout;
      TextInputLayout searchInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (searchInputLayout == null) {
        break missingId;
      }

      id = R.id.searchResultsRecyclerView;
      RecyclerView searchResultsRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (searchResultsRecyclerView == null) {
        break missingId;
      }

      id = R.id.swipeRefreshLayout;
      SwipeRefreshLayout swipeRefreshLayout = ViewBindings.findChildViewById(rootView, id);
      if (swipeRefreshLayout == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivitySearchBinding((LinearLayout) rootView, errorLayout, errorText,
          loadingLayout, retryButton, searchButton, searchEditText, searchInputLayout,
          searchResultsRecyclerView, swipeRefreshLayout, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
